!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public",n(n.s=3)}([function(e,t){var n=function(){};n.prototype.info=function(e){console.log(new Date+" - info:::::"+e)},n.prototype.debug=function(e){console.log(new Date+" - debug:::::"+e)},n.prototype.error=function(e){console.log(new Date+" - error:::::"+e)},e.exports=new n},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("dotenv")},function(e,t,n){const s=n(4),r=n(1)();n(2).config();const o=n(0),a=n(13);r.use(a.urlencoded({extended:!0})),r.use(a.json()),r.use((function(e,t,n){"application/json;"!==e.headers["content-type"]&&e.headers["content-type"]||(e.headers["content-type"]="application/json"),n()})),r.use((e,t,n)=>(t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Methods","GET, PUT, PATCH, POST, DELETE"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t.setHeader("Access-Control-Allow-Credentials",!0),"OPTIONS"===e.method?t.status(204).send():n())),r.get("/",(function(e,t){t.send("Wellcome")})),r.use(s),r.listen(process.env.PORT,()=>{o.info("App started at "+process.env.PORT)})},function(e,t,n){const s=n(1).Router(),r=n(0);s.use("/cliente",n(5)),r.info("Router setted"),e.exports=s},function(e,t,n){let s=n(1).Router();const r=n(6);this.service=new r,s.post("/",async(e,t)=>{let n=e.body,s=await this.service.save(n);s.erro?t.status(500).send(s):t.send(s)}),s.get("/",async(e,t)=>{let n=await this.service.list();t.send(n)}),s.get("/search",async(e,t)=>{let n=await this.service.search(e.query);t.send(n)}),e.exports=s},function(e,t,n){const s=n(7),r=n(8);e.exports=class extends s{constructor(){super(r)}}},function(e,t,n){const s=n(0);e.exports=class{constructor(e){this.table=e,this.logger=s}async get(e){}async persist(e){}async save(e){let t=new this.table(e);return await t.save()}async update(e){let t=new this.table(e);return await t.update()}async delete(e){return await this.table.deleteById(e)}async list(){let e=new this.table;return await e.list()}async search(e){let t=new this.table;return await t.search(e)}async paginate(e){}}},function(e,t,n){const s=n(9);e.exports=class extends s{constructor(e={}){super("CLIENTE"),this._addColumn("nome","NOME"),this._addColumn("telefone","TELEFONE"),this._setValues(e)}}},function(e,t,n){const s=n(10),r=n(12),o=n(0);e.exports=class{constructor(e){this.id=null,this._tableName=e,this._columns={id:"ID"}}_setValues(e){if(e)for(let t in e)try{this[t]=e[t]}catch(e){o.error(e)}}_addColumn(e,t){this._columns[e]=t}_getColumn(e){return this._columns[e]}getColumn(e){return this._columns[e]}_createPersistObject(){let e={};for(var t in this._columns)e[this._columns[t]]=this[t];return null===e[this._columns.id]&&delete e[this._columns.id],e}async _persist(e){try{const t=await s.query(e.query,e.values);return t&&t.rows&&t.rows[0]}catch(e){return o.error(e),e.erro="ERRO",e}}async get(e){const t=await s.query(r.get(this._tableName),[e]);return await t.rows[0]||{}}async save(){let e=this._createPersistObject(),t=r.insert(this._tableName,e);return await this._persist(t)}async update(){let e=this._createPersistObject(),t=r.update(this._tableName,e);return await this._persist(t)}static async deleteById(e){let t=r.deleteById(this._tableName);const n=await s.query(t,[e]);return await n.rows[0]||{}}async delete(){return await this.deleteById(this.id)}async list(){const e=await s.query(r.list(this._tableName),[]);return await e.rows}async search(e){const t=r.search(this,e);o.debug(t.query);const n=await s.query(t.query,t.values);return await n.rows}static async paginate(e){}}},function(e,t,n){e.exports=(()=>{const e=n(2),t=n(0);e.config();const{Pool:s}=n(11),r=new s({user:process.env.DB_USER,host:process.env.DB_URL,database:process.env.DB_DATABASE,password:process.env.DB_PASSWORD,port:5432});r.connect((e,n,s)=>{if(e)throw e;(e=>{e.query("\n        CREATE TABLE IF NOT EXISTS EXTENSAO (\n        ID serial,\n        EMAIL VARCHAR (50) UNIQUE,\n        PASSWORD VARCHAR (50),\n        LAST_PAYMENT date);\n        "),e.query("\n        CREATE TABLE IF NOT EXISTS LOGIN (\n          ID serial,\n          USUARIO VARCHAR (50) UNIQUE,\n          SENHA VARCHAR (50)\n        );\n        ")})(n),t.info("Database connected")});return{query:(e,t=[])=>r.query(e,t)}})()},function(e,t){e.exports=require("pg")},function(e,t,n){n(2).config(),e.exports={insert:(e,t)=>{let n=" VALUES (",s=`INSERT INTO ${process.env.DB_SCHEMA}.${e} (`,r=Object.keys(t);for(let e=0;e<r.length;e++)s+=r[e]+(e<r.length-1?",":")"),n+=" $"+(e+1)+(e<r.length-1?",":")");let o=Object.keys(t).map((function(e){return t[e]}));return s=s.concat(n),s=s.concat("RETURNING *"),{query:s,values:o}},update:(e,t)=>{let n=`UPDATE ${process.env.DB_SCHEMA}.${e} SET `,s=Object.keys(t).filter(e=>"id"!=e),r=[];for(let e=0;e<s.length;e++)"id"!=s[e]&&(n+=s[e]+" =  $"+(e+1)+(e<s.length-1?",":""),r.push(t[s[e]]));return n+=" WHERE ID = $"+(r.length+1),n=n.concat("RETURNING *"),r.push(t.id),{query:n,values:r}},search:(e,t)=>{let n=`SELECT *  FROM ${process.env.DB_SCHEMA}.${e._tableName}  where 1 = 1`,s=Object.keys(t),r=[];for(let o=0;o<s.length;o++){let a=s[o];n+=" and "+e.getColumn(a)+" =  $"+(o+1)+(o<s.length-1?",":""),r.push(t[a])}return{query:n,values:r}},get:e=>`SELECT * FROM ${process.env.DB_SCHEMA}.${e}  where id = $1`,deleteById:e=>`DELETE ${process.env.DB_SCHEMA}.${e}  where id = $1`,list:e=>`SELECT * FROM ${process.env.DB_SCHEMA}.${e} `}},function(e,t){e.exports=require("body-parser")}]);